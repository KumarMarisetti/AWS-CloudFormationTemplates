{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to Add Linux Instance to an Existing VPC",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Linux Instance Configuration"
          },
          "Parameters": [
            "VPCID",
            "AZForInstance1",
            "AZForInstance2",
            "Public1Subnet",
            "Public2Subnet",
            "KeyPair",
            "CIDRForInstanceAccess",
            "InstanceType"
          ]
        }
      ],
      "ParameterLabels": {
        "VPCID": {
          "default": "Please enter the VPC specific details here"
        }
      }
    }
  },
  "Parameters": {
    "VPCID": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Enter the VPC that you want to use the FortiGates in"
    },
    "AZForInstance1": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Enter the AZ for the primary instance"
    },
    "AZForInstance2": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Description": "Enter the AZ for the backup instance"
    },
    "Public1Subnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Enter the value of the Public1 subnet"
    },
    "Public2Subnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Enter the value of the Public2 subnet"
    },
    "CIDRForInstanceAccess": {
      "Type": "String",
      "Default": "0.0.0.0/0",
      "Description": "Enter the CIDR from which instance needs to be accessed"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "m3.medium",
      "AllowedValues": [
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge"
      ],
      "Description": "Enter the instance type and size that you want for the Linux Instances"
    },
    "KeyPair": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Enter the keypair that you want to associate with the launch of the Instances"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "linuxami": "ami-97785bed"
      },
      "us-west-2": {
        "linuxami": "ami-32d8124a"
      }
    }
  },
  "Conditions": {
  },
  "Resources": {
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstancePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:*"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "Allow SSH",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "TCP",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "CIDRForInstanceAccess"
            }
          }
        ]
      }
    },
    "Linux1Instance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "git": [],
                "gcc": []
              }
            },
            "files": {
              "/home/ec2-user/build_django.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -vx \n",
                      "yum upgrade -y \n",
                      "aws s3 cp s3://dg-stack-config/id_rsa /home/ec2-user/.ssh/id_rsa \n",
                      "chmod 600 /home/ec2-user/.ssh/id_rsa \n",
                      "chown ec2-user /home/ec2-user/.ssh/id_rsa \n",
                      "chgrp ec2-user /home/ec2-user/.ssh/id_rsa \n",
                      "aws s3 cp s3://dg-stack-config/id_rsa.pub /home/ec2-user/.ssh/id_rsa.pub \n",
                      "chmod 600 /home/ec2-user/.ssh/id_rsa.pub \n",
                      "chown ec2-user /home/ec2-user/.ssh/id_rsa.pub \n",
                      "chgrp ec2-user /home/ec2-user/.ssh/id_rsa.pub \n",
                      "pip install --upgrade pip \n",
                      "pip install --upgrade setuptools \n",
                      "mkdir -p /home/ec2-user/python \n",
                      "cd /home/ec2-user/python \n",
                      "chown ec2-user . \n",
                      "chgrp ec2-user . \n",
                      "ssh-keyscan bitbucket.org >> /home/ec2-user/.ssh/known_hosts \n",
                      "sudo -u ec2-user bash -c 'git clone git@bitbucket.org:fortiscripts/aws_lambda_autoscale.git' \n",
                      "cd aws_lambda_autoscale/ \n",
                      "virtualenv venv \n",
                      "source venv/bin/activate \n",
                      "pip install --upgrade pip \n",
                      "pip install --upgrade setuptools \n",
                      "pip install --no-cache-dir lambda-packages \n",
                      "pip install wheel cryptography \n",
                      "pip install --no-cache-dir zappa \n",
                      "pip install -r requirements.txt \n"
                    ]
                  ]
                },
                "encoding": "plain",
                "mode": "000755",
                "owner": "ec2-user",
                "group": "ec2-user"
              },
              "/home/ec2-user/.bashrc": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "# .bashrc \n",
                      "# Source global definitions \n",
                      "if [ -f /etc/bashrc ]; then \n",
                      "   . /etc/bashrc \n",
                      "fi \n",
                      " \n",
                      "# User specific aliases and functions \n",
                      "INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id` \n",
                      "EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone` \n",
                      "EC2_REGION=\"`echo \"$EC2_AVAIL_ZONE\" | sed -e 's:\\([0-9][0-9]*\\)[a-z]*\\$:\\1:'`\" \n",
                      "EC2_INSTANCE_NAME=`aws ec2 describe-instances --region $EC2_REGION --instance-id $INSTANCE_ID --query Reservations[*].Instances[*].Tags[?Key==\\'Name\\'].Value --output text` \n",
                      "EC2_INSTANCE_TITLE=\"$EC2_AVAIL_ZONE $EC2_INSTANCE_NAME\" \n",
                      "function title { \n",
                      "if [ \"$1\" ] \n",
                      "then \n",
                      "   unset PROMPT_COMMAND \n",
                      "   echo -ne \"\\033]0;${*}\\007\" \n",
                      "else \n",
                      "   export PROMPT_COMMAND='echo -ne \"\\033]0;${EC2_INSTANCE_TITLE} ${PWD/#$HOME/~}\\007\"' \n",
                      "fi \n",
                      "} \n",
                      "title \n"
                    ]
                  ]
                },
                "encoding": "plain",
                "mode": "000644",
                "owner": "ec2-user",
                "group": "ec2-user"
              }
            },
            "commands": {
              "a_virtual_environment": {
                "command": "/home/ec2-user/build_django.sh",
                "cwd": "/home/ec2-user"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "linuxami"
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh\n/opt/aws/bin/cfn-init --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource Linux1Instance \n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPair"
        },
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "Linux1InstanceENI0"
            },
            "DeviceIndex": "0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Linux1-Instance"
                ]
              ]
            }
          }
        ]
      }
    },
    "Linux1InstanceENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "true",
        "SubnetId": {
          "Ref": "Public1Subnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Linux 1 Instance ENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "Linux1EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "DependsOn": "Linux1Instance"
    },
    "Linux1EEIPASSOCIATION": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "Linux1EIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "Linux1InstanceENI0"
        }
      },
      "DependsOn": "Linux1EIP"
    },
    "Linux2Instance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "git": [],
                "gcc": []
              }
            },
            "files": {
              "/home/ec2-user/build_django.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -vx \n",
                      "yum upgrade -y \n",
                      "aws s3 cp s3://dg-stack-config/id_rsa /home/ec2-user/.ssh/id_rsa \n",
                      "chmod 600 /home/ec2-user/.ssh/id_rsa \n",
                      "chown ec2-user /home/ec2-user/.ssh/id_rsa \n",
                      "chgrp ec2-user /home/ec2-user/.ssh/id_rsa \n",
                      "aws s3 cp s3://dg-stack-config/id_rsa.pub /home/ec2-user/.ssh/id_rsa.pub \n",
                      "chmod 600 /home/ec2-user/.ssh/id_rsa.pub \n",
                      "chown ec2-user /home/ec2-user/.ssh/id_rsa.pub \n",
                      "chgrp ec2-user /home/ec2-user/.ssh/id_rsa.pub \n",
                      "pip install --upgrade pip \n",
                      "pip install --upgrade setuptools \n",
                      "mkdir -p /home/ec2-user/python \n",
                      "cd /home/ec2-user/python \n",
                      "chown ec2-user . \n",
                      "chgrp ec2-user . \n",
                      "ssh-keyscan bitbucket.org >> /home/ec2-user/.ssh/known_hosts \n",
                      "sudo -u ec2-user bash -c 'git clone git@bitbucket.org:fortiscripts/aws_lambda_autoscale.git' \n",
                      "cd aws_lambda_autoscale/ \n",
                      "virtualenv venv \n",
                      "source venv/bin/activate \n",
                      "pip install --upgrade pip \n",
                      "pip install --upgrade setuptools \n",
                      "pip install --no-cache-dir lambda-packages \n",
                      "pip install wheel cryptography \n",
                      "pip install --no-cache-dir zappa \n",
                      "pip install -r requirements.txt \n"
                    ]
                  ]
                },
                "encoding": "plain",
                "mode": "000755",
                "owner": "ec2-user",
                "group": "ec2-user"
              },
              "/home/ec2-user/.bashrc": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "# .bashrc \n",
                      "# Source global definitions \n",
                      "if [ -f /etc/bashrc ]; then \n",
                      "   . /etc/bashrc \n",
                      "fi \n",
                      " \n",
                      "# User specific aliases and functions \n",
                      "INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id` \n",
                      "EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone` \n",
                      "EC2_REGION=\"`echo \"$EC2_AVAIL_ZONE\" | sed -e 's:\\([0-9][0-9]*\\)[a-z]*\\$:\\1:'`\" \n",
                      "EC2_INSTANCE_NAME=`aws ec2 describe-instances --region $EC2_REGION --instance-id $INSTANCE_ID --query Reservations[*].Instances[*].Tags[?Key==\\'Name\\'].Value --output text` \n",
                      "EC2_INSTANCE_TITLE=\"$EC2_AVAIL_ZONE $EC2_INSTANCE_NAME\" \n",
                      "function title { \n",
                      "if [ \"$1\" ] \n",
                      "then \n",
                      "   unset PROMPT_COMMAND \n",
                      "   echo -ne \"\\033]0;${*}\\007\" \n",
                      "else \n",
                      "   export PROMPT_COMMAND='echo -ne \"\\033]0;${EC2_INSTANCE_TITLE} ${PWD/#$HOME/~}\\007\"' \n",
                      "fi \n",
                      "} \n",
                      "title \n"
                    ]
                  ]
                },
                "encoding": "plain",
                "mode": "000644",
                "owner": "ec2-user",
                "group": "ec2-user"
              }
            },
            "commands": {
              "a_virtual_environment": {
                "command": "/home/ec2-user/build_django.sh",
                "cwd": "/home/ec2-user"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "linuxami"
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh\n/opt/aws/bin/cfn-init --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                " --resource Linux2Instance\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPair"
        },
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "Linux2InstanceENI0"
            },
            "DeviceIndex": "0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Linux2-Instance"
                ]
              ]
            }
          }
        ]
      }
    },
    "Linux2InstanceENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "true",
        "SubnetId": {
          "Ref": "Public2Subnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Linux 2 Instance ENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "Linux2EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "DependsOn": "Linux2Instance"
    },
    "Linux2EEIPASSOCIATION": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "Linux2EIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "Linux2InstanceENI0"
        }
      },
      "DependsOn": "Linux2EIP"
    }
  },
  "Outputs": {
    "Linux1Instance": {
      "Value": {
        "Ref": "Linux1EIP"
      },
      "Description": "Connect to Amazon Linux 1 instance using ssh to this IP"
    },
    "Linux2Instance": {
      "Value": {
        "Ref": "Linux2EIP"
      },
      "Description": "Connect to Amazon Linux 2 instance using ssh to this IP"
    }
  }
}
