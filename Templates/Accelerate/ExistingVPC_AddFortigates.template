{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template that adds Fortigates and NLBs to an Existing VPC w/ DNS Prefixes to both ELBs",
    "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "VPC Configuration"
          },
          "Parameters": [
            "VPCID",
            "AZForFirewall1",
            "AZForFirewall2",
            "SubnetID1",
            "SubnetID2",
            "SubnetID3",
            "SubnetID4"
          ]
        },
        {
          "Label": {
            "default": "FortiGate Instance Configuration"
          },
          "Parameters": [
            "FortiGateEC2Type",
            "CIDRForFortiGateAccess"
          ]
        },
        {
          "Label": {
            "default": "Auto Scaling Configuration"
          },
          "Parameters": [
            "FortigateScalingParameter",
            "ScaleUpThreshold",
            "ScaleDownThreshold",
            "ScalingPeriod",
            "ASGroupMaxSize",
            "ASQueue",
            "LambdaRestEndpoint",
            "DynamoDBTableName"
          ]
        },
        {
          "Label": {
            "default": "ELB Configuration"
          },
          "Parameters": [
            "HealthCheckPort",
            "DomainName",
            "FGTDNSPrefix",
            "HTTPSDNSPrefix"
          ]
        }
      ]
    }
  },
  "Parameters": {
    "VPCID": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Enter the VPC that you want to use the FortiGates in"
    },
    "AZForFirewall1": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Default": "us-east-1a",
      "Description": "Enter the AZ for the primary firewall"
    },
    "AZForFirewall2": {
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "Default": "us-east-1c",
      "Description": "Enter the AZ for the secondary firewall"
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Enter the value of the Public Subnet 1"
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Enter the value of the Private Subnet 1"
    },
    "Subnet3": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Enter the value of the Public Subnet 2"
    },
    "Subnet4": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Enter the value of the Private Subnet 2"
    },
    "FortiGateEC2Type": {
      "Type": "String",
      "Default": "m3.medium",
      "AllowedValues": [
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge"
      ],
      "Description": "Enter the instance type and size that you want for the AutoScaled FortiGates"
    },
    "CIDRForFortiGateAccess": {
      "Type": "String",
      "Description": "Enter the CIDR from which FortiGate instances needs to be accessed"
    },
    "FortigateScalingParameter": {
      "Type": "String",
      "Default": "CPUUtilization",
      "AllowedValues": [
        "CPUUtilization",
        "MemoryUtilization",
        "ConcurrentSessions",
        "SessionSetupRate"
      ],
      "Description": "Please refer the url https://s3.amazonaws.com/fortinet-autoscaling/Fortinet+Auto+Scaling+in+AWS_Guidelines_Q1+2016.pdf for recommended values for ScaleUp and ScaleDown"
    },
    "ScaleUpThreshold": {
      "Type": "Number",
      "Default": "80",
      "Description": "Enter the value at which a Scaleup event would take place"
    },
    "ScaleDownThreshold": {
      "Type": "Number",
      "Default": "40",
      "Description": "Enter the value at which a Scaledown event would take place"
    },
    "ScalingPeriod": {
      "Type": "Number",
      "Default": "300",
      "Description": "Enter the number of seconds for the CloudWatchAlarm to trigger the ScaleinPolicy"
    },
    "ASGroupMaxSize": {
      "Type": "Number",
      "Default": "6",
      "Description": "MaximumInstances in the ASG"
    },
    "ASQueue": {
      "Type": "String",
      "Description": "Enter the Queue Name that would be used by the AutoScaling Group"
    },
    "LambdaRestEndpoint": {
      "Type": "String",
      "Default": "https://lambda.fortiengineering.com/dg",
      "Description": "Enter the HTTPS Endpoint for Updates to Dirty S3 Bucket"
    },
    "DynamoDBTableName": {
      "Type": "String",
      "Default": "DGDynDBTable",
      "Description": "Enter the dynamodb table name to use for autoscale state information"
    },
    "HealthCheckPort": {
      "Type": "Number",
      "Default": "541",
      "Description": "Enter the Health Check port used port for the external ELB"
    },
    "DomainName": {
      "Type": "String",
      "Default": "fortiengineering.com",
      "Description": "Enter the Domain Name for Route53 DNS Record Sets"
    },
    "FGTDNSPrefix": {
      "Type": "String",
      "Default": "fortias",
      "Description": "Enter the Prefix for Fortigate Route53 DNS Record Sets"
    },
    "HTTPSDNSPrefix": {
      "Type": "String",
      "Default": "httpsserver",
      "Description": "Enter the Prefix for the HTTPS Server Route53 DNS Record Sets"
    }
  },
  "Mappings": {
    "DefaultScalingupDownMap": {
      "CPUUtilization": {
        "ScaleUp": "80",
        "ScaleDown": "60"
      },
      "MemoryUtilization": {
        "ScaleUp": "80",
        "ScaleDown": "60"
      },
      "ConcurrentSessions": {
        "ScaleUp": "80",
        "ScaleDown": "60"
      },
      "SessionSetupRate": {
        "ScaleUp": "8000",
        "ScaleDown": "600"
      }
    },
    "RegionMap": {
      "us-west-2": {
        "fgtami": "ami-288b2950",
        "workerami": "ami-752ab815"
      },
      "us-east-1": {
        "fgtami": "ami-97f7d480",
        "workerami": "ami-6245d474"
      }
    }
  },
  "Resources": {
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "Allow All Traffic",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": {
              "Ref": "CIDRForFortiGateAccess"
            }
          }
        ]
      }
    },
    "BootfromS3": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "BootfromS3Policies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:*"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "BootfromS3"
          }
        ]
      }
    },
    "BootEC2": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "BootfromS3"
          }
        ]
      }
    },
    "OnDemandA": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "fgtami"
          ]
        },
        "InstanceType": {
          "Ref": "InitialFortiGateInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "BootEC2"
        },
        "DisableApiTermination": "False",
        "KeyName": {
          "Ref": "FortiGateKeyPair"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "OnDemandAENI0"
            },
            "DeviceIndex": "0"
          },
          {
            "NetworkInterfaceId": {
              "Ref": "OnDemandAENI1"
            },
            "DeviceIndex": "1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandA"
                ]
              ]
            }
          },
          {
			"Key": "Fortigate-State",
			"Value": "UnConfigured"
		  },
          {
            "Key": "Fortigate-License",
            "Value": "OnDemand"
          }
        ]
      }
    },
    "OnDemandAENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "true",
        "SubnetId": {
          "Ref": "Public1Subnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandAENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "OnDemandAEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "DependsOn": "OnDemandA"
    },
    "OnDemandAEIPASSOCIATION": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "OnDemandAEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "OnDemandAENI0"
        }
      },
      "DependsOn": "OnDemandAEIP"
    },
    "OnDemandAENI1": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Secondary Interface",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "Private1Subnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandBENI1"
                ]
              ]
            }
          }
        ]
      }
    },
    "OnDemandB": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "fgtami"
          ]
        },
        "InstanceType": {
          "Ref": "InitialFortiGateInstanceType"
        },
        "KeyName": {
          "Ref": "FortiGateKeyPair"
        },
        "IamInstanceProfile": {
          "Ref": "BootEC2"
        },
        "DisableApiTermination": "False",
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "OnDemandBENI0"
            },
            "DeviceIndex": "0"
          },
          {
            "NetworkInterfaceId": {
              "Ref": "OnDemandBENI1"
            },
            "DeviceIndex": "1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandB"
                ]
              ]
            }
          },
          {
            "Key": "Fortigate-State",
            "Value": "UnConfigured"
          },
          {
            "Key": "Fortigate-License",
            "Value": "OnDemand"
          }
        ]
      }
    },
    "OnDemandBENI0": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "eth0",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "true",
        "SubnetId": {
          "Ref": "Public2Subnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandBENI0"
                ]
              ]
            }
          },
          {
            "Key": "Interface",
            "Value": "eth0"
          }
        ]
      }
    },
    "OnDemandBEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "DependsOn": "OnDemandB"
    },
    "OnDemandBEIPASSOCIATION": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "OnDemandBEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "OnDemandBENI0"
        }
      },
      "DependsOn": "OnDemandBEIP"
    },
    "OnDemandBENI1": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Secondary Interface",
        "GroupSet": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "Private2Subnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "OnDemandBENI1"
                ]
              ]
            }
          }
        ]
      }
    },
    "HTTPSElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "HTTPSServerELB"
            ]
          ]
        },
        "Scheme": "internal",
        "Subnets": [
          {
            "Ref": "Subnet2"
          },
          {
            "Ref": "Subnet4"
          }
        ],
        "Type": "network"
      }
    },
    "HTTPSTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "HTTPSTargetGroup",
        "Port": 21,
        "Protocol": "TCP",
        "HealthCheckProtocol" : "TCP",
        "HealthCheckPort" : "22",
        "TargetType": "instance",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-HTTPSTargetGroup"
                ]
              ]
            }
          }
        ],
        "VpcId": { "Ref": "VPCID" }
      }
    },
    "HTTPSListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "HTTPSTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "HTTPSElasticLoadBalancer"
        },
        "Port": "443",
        "Protocol": "TCP"
      }
    },
    "PublicElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "PublicELB"
            ]
          ]
        },
        "Scheme": "internal",
        "Subnets": [
          {
            "Ref": "Subnet1"
          },
          {
            "Ref": "Subnet3"
          }
        ],
        "Type": "network"
      }
    },
    "PublicTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "PublicTargetGroup",
        "Port": 443,
        "Protocol": "TCP",
        "HealthCheckProtocol" : "TCP",
        "HealthCheckPort" : "22",
        "TargetType": "instance",
        "Targets": [
          {
            "Id": {"Ref": "OnDemandA"},
            "Port": 443
          },
          {
            "Id": {"Ref": "OnDemandB"},
            "Port": 443
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-PublicTargetGroup"
                ]
              ]
            }
          }
        ],
        "VpcId": { "Ref": "VPCID" }
      }
    },
    "PublicListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "PublicTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "PublicElasticLoadBalancer"
        },
        "Port": "443",
        "Protocol": "TCP"
      }
    },
    "HTTPSPublicELB": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DomainName"
              },
              "."
            ]
          ]
        },
        "RecordSets": [
          {
            "Name": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "HTTPSDNSPrefix"
                  },
                  ".",
                  {
                    "Ref": "DomainName"
                  },
                  "."
                ]
              ]
            },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "HTTPSElasticLoadBalancer",
                  "CanonicalHostedZoneID"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "HTTPSElasticLoadBalancer",
                  "DNSName"
                ]
              }
            }
          }
        ]
      },
      "DependsOn": "HTTPSElasticLoadBalancer"
    },
    "RecordPublicELB": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DomainName"
              },
              "."
            ]
          ]
        },
        "RecordSets": [
          {
            "Name": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "FGTDNSPrefix"
                  },
                  ".",
                  {
                    "Ref": "DomainName"
                  },
                  "."
                ]
              ]
            },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "PublicElasticLoadBalancer",
                  "CanonicalHostedZoneID"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "PublicElasticLoadBalancer",
                  "DNSName"
                ]
              }
            }
          }
        ]
      },
      "DependsOn": "PublicElasticLoadBalancer"
    }
  },
  "Outputs": {
  }
}